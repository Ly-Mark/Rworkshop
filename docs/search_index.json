[["index.html", "Chapter 1 About the workshop 1.1 Audience 1.2 Learning objectives", " Intro to R Workshop Dr. Na Li, Mark Ly 2023-05-12 Chapter 1 About the workshop Introduction to R is a 6-hour workshop, split into two 3-hour in-person sessions, introducing basic programming concepts in R and learning to execute data manipulations, calculations, basic statistical analyses, and produce useful figures and tables. Participants will also learn to write simple functions that can be used to automate analyses, practical statistical computing, and general programming concepts. 1.1 Audience This workshop is targeted towards researchers who are interested in learning R programming for data analysis within the University of Calgary and AHS. No prior programming knowledge is required. Having previous research experience or working in a research setting is preferred. 1.2 Learning objectives By the end of the workshop, participants will be able to: Install and configure R and R studio Be familiar with the R studio IDE Clean and prepare a dataset for analysis with common packages and functions Manipulate a data set to create meaningful tables and figures Generate a report inside R studio Learn about some other advanced capabilities that R has to offer. "],["r-and-r-studio.html", "Chapter 2 R and R studio 2.1 Getting Started (Desktop) 2.2 Getting Started (Cloud)", " Chapter 2 R and R studio R is programming language like Javascript, Python, Java, C and C++, that is mostly used for statistical computing and visualizations. RStudio is a integrated development environment (IDE) created to help organize and streamline your programming with R. There is a desktop version of RStudio, where you can download and work on a local environment or if you prefer, there is a cloud version where you can do cloud computing instead. Both the desktop and cloud version will be able to produce the same results and it really depends on your workstation capabilities, what types of scripts you are planning to run and, how often you are planning to use RStudio. 2.1 Getting Started (Desktop) 2.1.1 Installation To get started we want to download both R, the programming language, and R studio the IDE. You can get both from a quick Google search or from the website. https://posit.co/download/rstudio-desktop/ Figure 2.1: Download screen for R and RStudio We want to install R before we install RStudio Once you have downloaded both R and RStudio you can load up the RStudio IDE and it will come up with something like this. Figure 2.2: RStudio IDE 2.1.2 Creating a Project Every time we want to work on something new, we should make a New Project to keep things organized. This will be a folder where all your code and output will be stored. To create a new project we will go to File -&gt; New Project Figure 2.3: New After selecting New Project, select New Directory and then select New Project. You will then get a window that lets you type in a directory name and allows you to select a location for this folder. Figure 2.4: Creating new project Figure 2.5: Creating new project Figure 2.6: Creating new project Once we created the new project folder, we can create a new folder in there to hold our data. This will be more clear when we start loading our datasets. Now that everything is set up, we will start by making our first R-markdown file, which is a file format that allows you to write reports and as well with chunks of code. 2.1.3 Creating .RMD file Now that we have created our new project and added our data to the folder, we can create our first R Markdown file by going to File -&gt; New File -&gt; R Markdown R Markdown files are unique to R which is document that combines both text and code and allows you to format your document for HTML, PDF, MS Word. You can tell it is a R Markdown file when it has the extension .rmd A popup window should come up and we need to title our R Markdown file. You can type in 2023 Rworkshop for the title and then click on ok to create the .rmd file. Figure 2.7: RStudio markdown creation Once you hit OK, you should see a tab at the top that says Untitled1 and your RStudio IDE should have 4 distinct panels. Figure 2.8: New .rmd file Source - Places where most of the coding happens. The source can look different depending the type of file you are working with (.rmd, .R, .MD). Any dataset you want to view will also show up in this window. Environment/History - This is were you can find any stored variables (objects), imported scripts, loaded databases that are defined in memory. The history tab will contain a history of all the R commands that you have executed in this session Console/Terminal - This is were the commands that are written in the source window are actually executed and started to run. This would be the same if you were to use R using a command line instead of an IDE. You can run and enter in commands and scripts in this window, but they will be executed as soon as you hit ENTER/RETURN. Can be used to quickly check a snip of code, do some basic calculations or install some packages. Runtime errors will also show up in this window which can be useful when you are debugging. Files/Plots/Pkgs/Help/Viewer - This is more a directory window where you can cycle between files, plots, packages, help, and Viewer. 2.2 Getting Started (Cloud) If you would like to use the cloud version of RStudio you can sign up for the free version here: https://posit.cloud/plans/free Figure 2.9: Sign up for RStudio cloud If you are just planning to use R occasionally and don’t need heavy computing, then the free version of RStudio cloud will work just fine. 2.2.1 Creating .RMD File After logging in to the free account, you can click on New Project on the right hand side and select New RStudio Project Figure 2.10: RStudio Cloud Creating a new project Once you open the new project, you will get a screen similar to this. Figure 2.11: RStudio Cloud Creating a new project From here we want create a R Markdown file by going to File -&gt; New File -&gt; R Markdown Figure 2.12: RStudio Cloud new markdown file A pop-up will appear saying it will need to install some packages to create a R Markdown file. You can install these by selecting Yes Figure 2.13: RStudio cloud markdown packages Another popup window should come up and we need to title our R Markdown file. You can type in 2023 Rworkshop for the title and then click on ok to create the .rmd file. Figure 2.14: RStudio cloud markdown name Once you hit OK, you should see a tab at the top that says Untitled1 and your RStudio IDE should have 4 distinct panels. The panels are the same as the ones described in Getting Started (Desktop) "],["basics.html", "Chapter 3 Basics 3.1 Basic Operations 3.2 Code Chunk 3.3 Storing Variables 3.4 Using Variables 3.5 Logical operators 3.6 Data types", " Chapter 3 Basics Now that we set-up our R Markdown file we can start exploring what we can do with R The examples will be shown on R Desktop but will work the same if you are using R Cloud. In this section, we will learn about some simple coding operations you can perform with R, learn about different data types and, how to create and manipulate variables. 3.1 Basic Operations All the basic arithmetic operators can be done in using R which includes Addition: + Subtraction: - Multiplication: * Division: / Exponentiation: ^ Modulo: %% Note Modulo is an operation that will return the remainder of the division. For example; \\[ 11 \\bmod 4 = 3 \\] This is because 11 divides by 4 (twice) and you are left with 3 remaining. \\[ 25 \\bmod 5 = 0 \\] Alternatively, 25 divides into 5 evenly into 5 so you are left with no remainder. Try You can try out the following operations in the Console window in R studio. 4 + 5 24 - 8 4 * 4 11 / 3 11 %% 3 Alternatively, we can use our R Markdown file we created to do these operations as well. 3.2 Code Chunk To use the R Markdown file we will need to create a Code Chunk. For R Markdown files, each line outside of a code chunk will be text. To execute and run your code, it will need to be inside a code chunk. To create a code chunk you can go to the top and find Code and then click on Insert Chunk. Note For Mac users the shortcut for inserting a code chunk is: Command + Option + i For Windows users the shortcut for inserting a code chunk is: Ctrl + Alt + i Try Try to create a code chunk using either the menu at the top to insert or keyboard shortcuts in the source window where your R Markdown file is. You should see a new section appear like the image below Figure 3.1: RStudio code chunk You we can re-run the same operations from before in this code chunk instead of running it in the console. When you are ready, you can click on the green arrow at the top right of the code chunk to execute the entire chunk. The answers will be evaluated in order right beneath the code chunk. Try Try running the same equations as before but this time in the code chunk. Use the green arrow on the top right of code chunk to evaluate all the equations in the chunk. Figure 3.2: RStudio code chunk evaluated 3.3 Storing Variables We can use the code chunk to help us store variables we might want to reuse later on instead of having to type it out each time. To assign a value of 8 to the variable var1, you can use the following commands var1 &lt;- 8 or var1 = 8 Try Create a new code chunk and try storing our previous results to the variables a-e a &lt;- 4 + 5 b &lt;- 24 - 8 c &lt;- 4 * 4 d &lt;- 11 / 3 e &lt;- 11 %% 3 Note: When you assign a variable, RStudio will store it in the environment panel. Figure 3.3: Updated environemnt Once your variable is assigned you can recall the result by calling the variable. We can use the use these variables directly in the console or together in the R Markdown file. Try Try recalling the new variables in both the console and in a code chunk. Create another new code chunk and just type in the variable name. Click on the green arrow when you are ready to evaluate Figure 3.4: Using variables console 3.4 Using Variables We can also perform the same mathematical operations using stored variables instead of needing to write out. Try Using a code chunk or just in the console, perform the following operations. a + a b - c a * d b %% c 3.5 Logical operators R can also perform logical operations as well that include Less than: &lt; Less than or equal to: &lt;= Greater than: &gt; Greater than or equal to: &gt;= Exactly Equal to: == Not equal to: != OR: | AND: &amp; In any type of programming you do, you will likely run into these logical operations. You will commonly see these types of operators when we are cleaning and preparing data sets for analysis. For health data, we can use logical operators to help us determine disease status or help us separate age groups. Try Try using the following logical operators on the variables that we created in the console or in a code chunk a &gt; b b == c e &lt;= b 3.6 Data types There are different data types you will run into while you are working on a data set including Numeric: All real numbers with or without decimals 8.4 Integers: Whole numbers 29 Logical: Boolean values TRUE or FALSE Characters: Characters or String values. A single letter is a character A. A word or a sentence would be a string Orange It is important to know the data type you are working with since some of the common mistakes in cleaning and working with a data set is trying to combine data types that are not compatible. Try Let’s create a new code chunk and create one of each variable time and try to perform some arithmetic operations on them to see what happens. Note Logical variables: The proper syntax is all caps TRUE or FALSE Characters: For strings and characters, you need to surround the word or the letter with single or double quotations. “Apple” “Orange” ‘Cat’ new_num &lt;- 8.4 new_int &lt;- 29 new_logi &lt;- TRUE new_stringA &lt;- &quot;R Workshop&quot; new_stringB &lt;- &quot;2023&quot; Note A quick way to check what type of variable you are dealing with is to use the class function. i.e., class(new_num) new_num + new_int new_stringA == new_stringB To combine strings together we want to use the paste() function paste(new_stringA, new_stringB) "],["data-structures.html", "Chapter 4 Data Structures 4.1 Vectors 4.2 Lists 4.3 Matrices 4.4 Dataframes 4.5 Factors", " Chapter 4 Data Structures So far we’ve learned some basics of what you can do in R and R Studio including the creation and storage of variables. When processing data sets, we need to use data structures for processing, retrieving and storing data. These data structures are Vectors: Stores elements of the same type Lists: Stores elements of different types. Can contain store numerical values, strings and characters all together. Matrices: Stores elements arranged in a 2d layout with rows and columns. Data frames: A 2d table-like structure where each column can have a different data type. Factors: Used to categorize the data and store it in levels. 4.1 Vectors This is a one dimensional data structure where all the elements in the vector are the same. Similar to vectors that are found in mathematics. Imagine that you’re going on a vacation and you need to pack all the essentials in your luggage. To make most space you want to use packing cubes and pack all your similar items together. So all your shirts go in one cube, all your pant in another and, all your electric devices in the third one. You can think of your packing cube as a vector in R, and the items you’re packing as the elements of the vector. 4.1.1 Creating simple vectors Try Try creating a vector using the c( ) function. num_vector &lt;- c(2,0,2,3) shirt_vector &lt;- c(&quot;Grey shirt&quot;,&quot;White Shirt&quot;,&quot;Black Shirt&quot;) pant_vector &lt;- c(&quot;Blue jeans&quot;, &quot;Beige chinos&quot;, &quot;Black shorts&quot;) electronic_vector &lt;-c(&quot;Phone charger&quot;, &quot;Phone cable&quot;, &quot;Laptop&quot;) Figure 4.1: Basic Vectors 4.1.2 Simple vector operations One thing that’s unique about vectors in R is that you can perform operations on them all at once. Because of your organized packing you are able to double the number of shirts you can pack. If num_vector represents the number of each shirt, you can simply multiply this by 2 and you can increase the number of shirts you are bringing with you. Try Try doubling the num_vector variable you created. Also, try to see what happens when you try to double the shirt_vector. 4.2 Lists A list in R is like a container that can hold any type of data. So in this case, your luggage will be a list because it used to hold all the the different items together (shirts, pants, electronics). We will have a luggage list which contains a shirt vector, a pant vector and electronic vector. 4.2.1 Creating a list of vectors Try Try to make the luggage list with the our previous vectors by using the list( ) function luggage_list &lt;- list(shirt_vector, pant_vector,electronic_vector) Figure 4.2: Basic Lists 4.2.2 Accessing elements in the list Notice the output we get when we call our list. Our shirts are the first item in our list, pants the second and electronics the third. If you want to check what jeans you packed in your luggage list, you can use luggage_list[[2]] Try Try accessing the pants section in our luggage list. 4.2.3 Adding items to lists 4.2.3.1 Add to the end Let’s say you need to add another packing cube but this time it has all your toiletries. To do this you need try the following: toiletries_vector &lt;- c(&quot;Toothbrush&quot;, &quot;Toothpaste&quot;,&quot;Floss&quot;) luggage_list &lt;- c(luggage_list,list(toiletries_vector)) If we were to check our list again, we can see that our new toiletry vector has been added to the end of the list. 4.2.3.2 Add to the front We still have a little bit of space in our luggage and decide to pack some shoes. If we want to add shoes to the front our list try the following shoes_vector &lt;- c(&quot;Running shoes&quot;,&quot;Sandles&quot;) luggage_list &lt;- c(list(shoes_vector), luggage_list) Try Try adding toiletries vector to the end of the list and the shoes vector to the front of our luggage list using the code provided above. Your luggage list should now have shoes, shirts, jeans, electronics and toiletries. 4.2.4 Labeling items within lists Now that our list has grown, we should label each item incase we forget the of our items. To rename the items in the list you can use the names( ) function. names(luggage_list) &lt;- c(&quot;Shoes&quot;,&quot;Shirts&quot;,&quot;Pants&quot;,&quot;Electronics&quot;,&quot;Tolietries&quot;) Now we can we can access our items by using the $ symbol which make it easier to check what lists we have. Try Try accessing the Electronics vector in our luggage_list using the $ Symbol. Figure 4.3: Basic Lists We have created a luggage_list that has 5 vectors that are labeled shoes, shirts, pants, electronics and toiletries. 4.3 Matrices A matrix is a 2d data structure that contains rows and columns. Matrices can only contain elements of the same data type, so all the elements in the matrix must be either numeric, character, or logical. Matrices are useful for organizing and manipulating data in a structure and efficient manner since we are able to perform mathematic operations on them, like linear algebra. In our current example, we can consider a matrix as a packing checklist where each row represents a particular item to pack (such as shirts, pants, or shoes) and each column represents a each of our travel partners luggage. The elements of the matrix could then represent the quantity of each item to pack in each suitcase 4.3.1 Creating a matrix We can generate a matrix using the matrix( ) function packing_matrix &lt;- matrix(0,nrow = 5, ncol=3) rownames(packing_matrix) &lt;- c(&quot;Shoes&quot;, &quot;Shirts&quot;, &quot;Pants&quot;, &quot;Electronics&quot;, &quot;Toiletries&quot;) colnames(packing_matrix) &lt;- c(&quot;My_Luggage&quot;, &quot;Traveler_2&quot;, &quot;Traveler_3&quot;) print(packing_matrix) ## My_Luggage Traveler_2 Traveler_3 ## Shoes 0 0 0 ## Shirts 0 0 0 ## Pants 0 0 0 ## Electronics 0 0 0 ## Toiletries 0 0 0 Try Try creating a packing matrix using the code provided above 4.3.2 Navigating the matrix 4.3.2.1 Filling in values Now that we have created our matrix, we can access certain columns and rows by indexing which is done using square brackets [ ]. The synatax for using square brackets would be matrix[row,column]. Currently, we have no values in our matrix but we can fill them using indexing. Let’s say you ended up packing 2 shoes, 6 shirts, 3 pants, 4 electronics, and 2 toiletries. To add this to your matrix, you would create a vector and then pass that vector into the first column using the indexing syntax packing_matrix[, 1] &lt;- c(2, 6, 3, 4, 2) Now when check our matrix we should have the first column filled out with the number of items that we packed. Figure 4.4: Matrix filled Try Try filling putting values for Traveler_2 and Traveler_3. You can select them yourself or just generate them randomly. Note To randomly generate some numbers we can use the sample( ) function. i.e., sample(1:8, 5, replace = TRUE) packing_matrix[,2] &lt;- sample(1:8, 5, replace = TRUE) packing_matrix[,3] &lt;- sample(1:8, 5, replace = TRUE) Now that our have filled our packing matrix, we can easily showcase how to access columns and rows in a matrix. Figure 4.5: Matrix full 4.3.2.2 Selecting columns Let’s say we want to double check all the things that were packed for myself. To index a column of a matrix you simply have to use the square brackets. Since we know we are the first column in the matrix we can use packing_matrix[,1] to find out what we packed. packing_matrix[,1] ## Shoes Shirts Pants Electronics Toiletries ## 2 6 3 4 2 Try Try see what Traveler_2 and Traveler_3 packed 4.3.2.3 Selecting rows Let’s say we are curious on how many shirts each person going on this trip packed. We will still use square brackets, but this time we will be indexing the row instead of the column. packing_matrix[2,] packing_matrix[2,] ## My_Luggage Traveler_2 Traveler_3 ## 6 3 3 4.3.2.4 Multiple selections If we want to see how our packing compares to our travelling partners packing we can use a vector to index 2 columns at the same time. packing_matrix[,c(1,3)] ## My_Luggage Traveler_3 ## Shoes 2 6 ## Shirts 6 3 ## Pants 3 1 ## Electronics 4 3 ## Toiletries 2 5 We can also index a certain range instead of selecting specific rows or columns. Let’s say we want to check the what each person packed for shoes, shirts and pants. We could index using a vector by putting all 3 numbers or we can use a colon : to check the range. packing_matrix[1:3,] ## My_Luggage Traveler_2 Traveler_3 ## Shoes 2 6 6 ## Shirts 6 3 3 ## Pants 3 4 1 4.4 Dataframes Dataframes is a very popular data structure in R since they are easy to work with and allows you do organize and work with data very efficiently. A dataframe is another tabular object like the matrix but the difference between the two is that you can store different types of data in a dataframe. Think of it similar to an excel spreadsheet where you can different types of data for each column (age, gender, income, etc.). 4.4.1 Creating a dataframe So with our vacation example, we can use a dataframe to keep track of the preferences of each traveler with the following variables. Age (numerical) Gender (factor) Budget (numerical) Number of luggages (numerical) Weight of luggages (numerical) Food allergies (string) Activities (string) Must see places (string) Note To create a dataframe you can use the function data.frame( ) travelers &lt;- data.frame( Age = c(25, 30, 35), Gender = factor(c(&quot;Female&quot;, &quot;Male&quot;, &quot;Non-binary&quot;), levels = c(&quot;Male&quot;, &quot;Female&quot;, &quot;Non-binary&quot;)), Budget = c(1500, 2500, 2000), Num_luggages = c(2, 3, 1), Weight_luggages = c(20, 15, 25), Food_allergies = c(&quot;Peanuts, shellfish&quot;, &quot;Gluten, dairy&quot;, &quot;None&quot;), Activities = c(&quot;Hiking, sightseeing&quot;, &quot;Museums, beach&quot;, &quot;Shopping, nightlife&quot;), Must_see_places = c(&quot;Eiffel Tower, Colosseum&quot;, &quot;Statue of Liberty, Grand Canyon&quot;, &quot;Golden Gate Bridge, Machu Picchu&quot;) ) print(travelers) ## Age Gender Budget Num_luggages Weight_luggages Food_allergies ## 1 25 Female 1500 2 20 Peanuts, shellfish ## 2 30 Male 2500 3 15 Gluten, dairy ## 3 35 Non-binary 2000 1 25 None ## Activities Must_see_places ## 1 Hiking, sightseeing Eiffel Tower, Colosseum ## 2 Museums, beach Statue of Liberty, Grand Canyon ## 3 Shopping, nightlife Golden Gate Bridge, Machu Picchu 4.4.2 Using a dataframe 4.4.2.1 Manipulating data Like spreadsheets, we can manipulate the dataframe to create new variables. If we wanted to find out the average weight of the luggages we can use build in mean function mean(travelers$Weight_luggages) ## [1] 20 We can also find the median as well using the median function median(travelers$Weight_luggages) ## [1] 20 4.4.2.2 Subsetting data If we don’t want all the columns, we can subset what we need into a new dataframe using square brackets df[row,col]. If we wanted to to look Age, Gender and, Budget we can use the following code. Note: This is using base R, we will be using a package later on called ‘dplyr’ to also subset the data travelers[,1:3] ## Age Gender Budget ## 1 25 Female 1500 ## 2 30 Male 2500 ## 3 35 Non-binary 2000 Note: If we didn’t know the names the columns we can use the names( ) function to find out the column names. If we knew the names, we can also subset using a vector and the names of the columns we want to subset travelers[,c(“Age”,“Gender”,“Budget”)] 4.4.2.3 Filtering data Let’s say that we are only interested in those who have a budget that is &lt; 2500. We can use the logical statements that were introduced in Chapter 3 to do this. travelers[travelers$Budget &lt;2500, ] ## Age Gender Budget Num_luggages Weight_luggages Food_allergies ## 1 25 Female 1500 2 20 Peanuts, shellfish ## 3 35 Non-binary 2000 1 25 None ## Activities Must_see_places ## 1 Hiking, sightseeing Eiffel Tower, Colosseum ## 3 Shopping, nightlife Golden Gate Bridge, Machu Picchu Try Try to subset the dataframe for Age &gt; 25 travelers[travelers$Age &gt;25, ] ## Age Gender Budget Num_luggages Weight_luggages Food_allergies ## 2 30 Male 2500 3 15 Gluten, dairy ## 3 35 Non-binary 2000 1 25 None ## Activities Must_see_places ## 2 Museums, beach Statue of Liberty, Grand Canyon ## 3 Shopping, nightlife Golden Gate Bridge, Machu Picchu 4.5 Factors Factors are used to represent categorical variables such as Gender or Income levels. Using the factor( ) function, we can change text data types to factor data types and use built in-functions to work with categorical data. You may have noticed before when we created our travel dataframe that gender was coded using the factor( ) factor(c(&quot;Female&quot;, &quot;Male&quot;, &quot;Non-binary&quot;), levels = c(&quot;Male&quot;, &quot;Female&quot;, &quot;Non-binary&quot;)) ## [1] Female Male Non-binary ## Levels: Male Female Non-binary we can use the table function to show us the number observations in each category. table(travelers$Gender) ## ## Male Female Non-binary ## 1 1 1 the levels( ) function will show the order of our categorical variable. In our travelers dataframe, we set the levels as Male, Female, Non-binary. If want to know the integer representation we can use the as.numeric( ) function to show us the order. In our example, the first traveler is “Female”, second is “Male” and, third is “Non-binary”. as.numeric(travelers$Gender) ## [1] 2 1 3 "],["r-packages.html", "Chapter 5 R Packages 5.1 R Packages 5.2 R markdown", " Chapter 5 R Packages 5.1 R Packages Packages are a collection of functions that extend the functionality of R. They are tools that help with data analysis, modelling, data visualization. Some of the most common packages in R is ggplot2 for data visualization, dplyr for data wrangling/manipulation and caret for machine learning. 5.1.1 Installing Packages To use packages we will have the the install.packages( ) function and put in the package. We can either does this as a chunk in a R-markdown file or we can type it directly into the console. To install a package, we will need to write the name of the package we want to install surrounded by quotes. install.packages('package name') Try Try installing dplyr, ggplot2, and tinytex packages Note You can install multiple packages are the same time if you put then in a vector and before using the install.packages( ) function. i.e., install.packages(c(‘dplyr’,‘ggplot2’,‘tinytex’)) 5.2 R markdown One advantage to using R-studio is the ability to output reports into as a word, html, or pdf format. Using the knit function capabilities, we can create reports that can be easily reproduced since the code and outputs are all in the same R-markdown file. This is an advantage if you need to generate reports if data gets updated. 5.2.1 Installing R Markdown Just like above, we want to install our package using install.packages( ) function Try Try installing rmarkdown 5.2.2 Why R Markdown As we’ve been using throughout day 1, R markdown files are convenient because we can execute and display our code in line. In day 2 we will use this to generate a report after some data analysis. R markdown files are great at organizing your workflow. Here is a image from Intro to R book by Alex Douglas, Deon Roos, Francesca Mancini, Ana Couto &amp; David Lusseau. https://intro2r.com/ Figure 5.1: Work flow By working with R studio environment, we can simplify the workflow by performing the analysis, creating the figures and results, and writing the report all in one place. If adjustments to the report need to made, we can quickly regenerate the report using in a R markdown file. Figure 5.2: Work flow with R R markdown files can also handle other formats including LaTex, html, and css which can help us format our final report. There are r markdown cheat sheets available online to quickly find commands for formatting your report. Figure 5.3: Markdown cheatsheet Figure 5.4: Markdown cheatsheet page 2 5.2.3 Using Packages 5.2.3.1 Loading Packages After installing our packages, we have to load them using the library( ) function or the require( ) function. This is similar to opening up a new app or program that you just installed. Try Try loading the 3 packages that we just installed (dplyr, ggplot2, and tinytex) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(tinytex) library(ggplot2) 5.2.4 Documentation One important skill when working with packages is being able to understand the documentation of how to use the commands. If we put two ?? in front of the package name in our console and hit enter, we can see the documentation pop up in the viewer window in the bottom right. If we want to look at the documentation for a specific function, we only need one ? in front. Try Try looking at the documentation for the package ggplot2 and the function data.frame Figure 5.5: Documentation window "],["data-wrangling.html", "Chapter 6 Data Wrangling 6.1 dplyr 6.2 Loading datasets 6.3 Understanding your dataset 6.4 Combining your dataset 6.5 Missing values", " Chapter 6 Data Wrangling Our goal is to generate a report with using a R-markdown file that includes some data analysis and data visualizations. We are going to use the travelers dataframe that we created yesterday as a starting point but will incorporate other datasets as we continue throughout the day. Let’s create a new R markdown file and called it travelers. We want to install and load the packages that we introduced yesterday. We will be adding a few packages as we go throughout the day. dplyr ggplot2 Let’s also create our travelers dataframe from yesterday travelers &lt;- data.frame( Age = c(25, 30, 35), Gender = factor(c(&quot;Female&quot;, &quot;Male&quot;, &quot;Non-binary&quot;), levels = c(&quot;Male&quot;, &quot;Female&quot;, &quot;Non-binary&quot;)), Budget = c(1500, 2500, 2000), Num_luggages = c(2, 3, 1), Weight_luggages = c(20, 15, 25), Food_allergies = c(&quot;Peanuts, shellfish&quot;, &quot;Gluten, dairy&quot;, &quot;None&quot;), Activities = c(&quot;Hiking, sightseeing&quot;, &quot;Museums, beach&quot;, &quot;Shopping, nightlife&quot;), Must_see_places = c(&quot;Eiffel Tower, Colosseum&quot;, &quot;Statue of Liberty, Grand Canyon&quot;, &quot;Golden Gate Bridge, Machu Picchu&quot;) ) Next, we will be perform some data wrangling. Data wrangling refers to the process of gathering, cleaning, transforming, and organizing raw data into a format that is suitable for analysis or further processing. We will be using the dplyr package we installed in the previous chapter to do this. 6.1 dplyr The dplyr is used for data manipulation and can allow us to work with data more efficiently than with base R. We can do the same operations in our previous travelers dataframe using dplyr. 6.1.1 Pipe function (%&gt;%) This is one of the most powerful functions in the dplyr package. What the pipe function does is takes the output of one function and then passes it along to the next one. So instead of saving results to multiple variables, we can perform a sequence of commands in as one command. Using our previous travelers dataframe, we were able to calculate the mean luggage weight for all travelers but what if we are interested in the total weight of the luggage each traveler is bringing? We can do this in dplyr using the pipe function (%&gt;%) and mutate( ) function, which creates a new column. We can also subset the data as in the same function as well. Let’s say we are only interested in all the numerical values, we can use the select function to ask it to select all the columns that hold numerical data. travelers %&gt;% mutate(mean_weight = Weight_luggages/Num_luggages) %&gt;% select(c(where(is.numeric))) ## Age Budget Num_luggages Weight_luggages mean_weight ## 1 25 1500 2 20 10 ## 2 30 2500 3 15 5 ## 3 35 2000 1 25 25 You can see our new column mean_weight added to the end and that the dataframe only contains numerical values. If we were to do this without the pipe function, we would first need to get add the mean_weight column, save it, then subset our data for all numeric values including our new column. Lets say we want to filter our data finding travelers with a age &gt;25 or if they have a budget &gt;2500. We can do this all together in one command using dplyr using the filter( ) command. travelers %&gt;% filter(Age &gt; 25 | Budget &gt; 2500) ## Age Gender Budget Num_luggages Weight_luggages Food_allergies ## 1 30 Male 2500 3 15 Gluten, dairy ## 2 35 Non-binary 2000 1 25 None ## Activities Must_see_places ## 1 Museums, beach Statue of Liberty, Grand Canyon ## 2 Shopping, nightlife Golden Gate Bridge, Machu Picchu Note The | is the logical statment OR in R. &amp; is the logical statment for AND We can see that we have 2 entries that are either Age &gt;25 or have a Budget &gt;2500 There are a lot more functions that are part of dplyr package. The most common ones for data manipulation are mutate( ) - Adds a new variable to your dataframe based on existing variables select( ) - Picks variables from a dataframe based on their names filter( ) - Picks out cases based on criteria summarise( ) - Reduces down values down to a single summary arrange( ) - Changes the order of the rows based For more information or more practice you can go to the dplyr website which also has a online book on data transformation. https://dplyr.tidyverse.org/ 6.2 Loading datasets More often than not, we will be working with a datasets instead of creating our own. In R we can load the different types of files, the most common being a comma separated file (CSV). Now that we have our travelers preferences and budget we need to find a destination that would be suitable for each of our travelers. We will be using a few datasets from Numbeo.com and The World bank. We want to save these as variables so we can access them later. To load a dataset, we will use the read.csv( ) function and save the dataset as a variable in our environment. The first one we want to load is from numbeo.com which shows us the cost of a inexpensive meal at a restaurant. Note The data from numbeo.com is aggregated by user submissions and calculates the average costs of certain products meals &lt;- read.csv(&quot;data/numbeo_meal.csv&quot;) Another way to load your data is using the import function in R studio. Figure 6.1: import function When you select the file you want to import a window will appear and you can do some quick modification to our data if needed. Figure 6.2: import window Note One of the most common issues when using this feature is the setting the headers. There is a radial button for the header which you can toggle on and off. Try We will be making use of the ticket, arrivals and, country codes dataset. You can try loading these files with the interface or using a code chunk. ticket &lt;- read.csv(&quot;data/numbeo_ticket.csv&quot;) arrival &lt;- read.csv(&quot;data/world_bank_arrival.csv&quot;) country_codes &lt;- read.csv(&quot;data/country_codes_iso.csv&quot;) 6.3 Understanding your dataset Knowing what your dataset contains is important when performing data analysis. The more familiar you are with the shape of your dataset, the more insights you are able to pull out from it. This includes knowing the number of rows and columns as well as the types of columns that you are working with. We can use the View( ) function in order to open up a new tab to view the dataset like an excel sheet. Note This function is case sensitive and must be called with a uppercase V View(meals) To quickly look at the first 6 rows of the data we can use the head( ) function. head(meals,3) ## Country Meal_Inexpensive_Restaurant ## 1 Switzerland 37.35 ## 2 Denmark 27.58 ## 3 United States 26.72 Note You can specify the number of rows you want to examine by adding the number to function i.e., head(meals,4) You can also view the last rows of the column using the tail( ) function tail(meals,3) ## Country Meal_Inexpensive_Restaurant ## 103 Sri Lanka 2.05 ## 104 Nigeria 2.02 ## 105 Pakistan 1.65 We can do some quick summary statistics using the summary( ) function as well. Depending on the type of data in each column, we can see the length or a number summary including the min, max, mean, median, mode, and the 1st and 3rd quartiles. summary(meals) ## Country Meal_Inexpensive_Restaurant ## Length:105 Min. : 1.65 ## Class :character 1st Qu.: 5.87 ## Mode :character Median :10.21 ## Mean :11.53 ## 3rd Qu.:15.52 ## Max. :37.35 6.4 Combining your dataset Currently, we have 4 separate datasets that contain all the information we need. Our goal is to combine all the dataset to a singular one which we can start our data analysis. To do this need something that is unique for all the entries. In our case, the ISO country code and the country name are something that is unique for each entry. We will be using the country_codes dataset as our base. 6.4.1 Binds There are different types of ways to join your dataset depending on your desired outcome. Sometimes we just need to add columns or rows to the base dataset. For this, we can use either rbind( ) or cbind( ) if the conditions are appropriate. rbind( ) - row bind will add rows to the base dataset if they number of rows and the row names are the same. cbind( ) - column bind will add more columns to the base dataset if the they have the same number of rows. 6.4.2 Joins Most times, we will have an unequal amount of rows or columns and we want to match with something unique to eaach row. For this we can utilize joins. There are different types of joins you can use that all perform their task differently. left_join( ) - Matches all paired variables to the left dataframe right_join( ) - Matches all paired variables to the right dataframe inner_join( ) - Returns a dataframe with only matching variables. If their is no matching variable, it does not get included. full_join( ) - Keeps all variables from both dataframes even if they do not match. Figure 6.3: Types of Joins Note left_join() is the most common join you will be using during a data analysis Let’s try to combine all 4 datasets into one working dataset. First we want to combine our meal and ticket dataframes since they have the same number of rows. We will use a left_join( ) to combine these based on the country name. Try Try to perform a left_join( ) on the meal and ticket based on Country name. travel_meal_tickets &lt;- left_join(meals,ticket,by = &quot;Country&quot;) head(travel_meal_tickets,3) ## Country Meal_Inexpensive_Restaurant one_way_ticket_local ## 1 Switzerland 37.35 5.38 ## 2 Denmark 27.58 4.73 ## 3 United States 26.72 3.34 Using a left join, we now have a single dataframe with 3 columns, Country name, the price for the restaurants and price for a one way ticket. Next, lets combine this dataframe with the country codes dataframe. Looking at the country code dataframe, we have 4 columns and 249 rows. We do need some cleaning on this dataframe before continuing. Let’s keep the Country column and just the 3 digit alpha code using dplyr and the select( ) function country_code_subset &lt;- country_codes %&gt;% select(c(Country,alpha_3_code)) %&gt;% rename(country_code = alpha_3_code) head(country_code_subset,3) ## Country country_code ## 1 Afghanistan AFG ## 2 Albania ALB ## 3 Algeria DZA We want to use our new subset of the country_codes as our base model and join the meal/ticket dataframe to this one. Since the country code has 249 rows and the meal/ticket one has 105 rows. We want to use a full join here because we aren’t sure of the country names are spelled the same in each dataframes. country_ticket_meal_code &lt;- full_join(country_code_subset,travel_meal_tickets, by = &quot;Country&quot;) head(country_ticket_meal_code,3) ## Country country_code Meal_Inexpensive_Restaurant one_way_ticket_local ## 1 Afghanistan AFG NA NA ## 2 Albania ALB 7.79 0.52 ## 3 Algeria DZA 2.96 0.25 Using the filter( ) function, we can filter out which alpha_3_codes are missing and we notice there is just one which is Kosovo. country_ticket_meal_code %&gt;% filter(is.na(country_code)) ## Country country_code Meal_Inexpensive_Restaurant ## 1 Kosovo (Disputed Territory) &lt;NA&gt; 5.87 ## one_way_ticket_local ## 1 0.73 Note Kosovo is not country recognized by ISO 3166 standards. Finally, we want to join our last database which is the from the world bank that contains the number of arrivals to the country from 1960 - 2021 however, we need to perform some data cleaning before we can combine them together. Having a look at our dataframe we see each columns for years has a X in front of it. We will want to rename that by using the rename_all( ) which is part of the dplyr package. Note The period (.) being used here is a special character here that means for this “For this current dataframe” arrival_clean &lt;- arrival %&gt;% rename_all(~stringr::str_replace(.,&quot;^X&quot;,&quot;&quot;)) head(arrival,3) ## Country country_code X1960 X1961 X1962 X1963 X1964 X1965 ## 1 Aruba ABW NA NA NA NA NA NA ## 2 Africa Eastern and Southern AFE NA NA NA NA NA NA ## 3 Afghanistan AFG NA NA NA NA NA NA ## X1966 X1967 X1968 X1969 X1970 X1971 X1972 X1973 X1974 X1975 X1976 X1977 X1978 ## 1 NA NA NA NA NA NA NA NA NA NA NA NA NA ## 2 NA NA NA NA NA NA NA NA NA NA NA NA NA ## 3 NA NA NA NA NA NA NA NA NA NA NA NA NA ## X1979 X1980 X1981 X1982 X1983 X1984 X1985 X1986 X1987 X1988 X1989 X1990 X1991 ## 1 NA NA NA NA NA NA NA NA NA NA NA NA NA ## 2 NA NA NA NA NA NA NA NA NA NA NA NA NA ## 3 NA NA NA NA NA NA NA NA NA NA NA NA NA ## X1992 X1993 X1994 X1995 X1996 X1997 X1998 X1999 X2000 ## 1 NA NA NA 912000 957000 947000 906000 972000 1211000 ## 2 NA NA NA 11583545 13088654 13456246 14403852 15309378 15353177 ## 3 NA NA NA NA NA NA NA NA NA ## X2001 X2002 X2003 X2004 X2005 X2006 X2007 X2008 ## 1 1178000 1225000 1184000 1304000 1286000 1285000 1254000 1383000 ## 2 15854696 17383375 17844385 18745951 19917566 22650321 25114898 25413098 ## 3 NA NA NA NA NA NA NA NA ## X2009 X2010 X2011 X2012 X2013 X2014 X2015 X2016 ## 1 1420000 1394000 1469000 1481000 1667000 1739000 1832000 1758000 ## 2 25964418 29071501 31650244 32748552 34426633 35738392 35318681 37645888 ## 3 NA NA NA NA NA NA NA NA ## X2017 X2018 X2019 X2020 X2021 ## 1 1863000 1897000 1951000 NA NA ## 2 38258348 41189145 39826701 NA NA ## 3 NA NA NA NA NA head(arrival_clean,3) ## Country country_code 1960 1961 1962 1963 1964 1965 1966 ## 1 Aruba ABW NA NA NA NA NA NA NA ## 2 Africa Eastern and Southern AFE NA NA NA NA NA NA NA ## 3 Afghanistan AFG NA NA NA NA NA NA NA ## 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 ## 1 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## 2 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## 3 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 ## 1 NA NA NA NA NA NA NA NA NA NA NA NA NA 912000 ## 2 NA NA NA NA NA NA NA NA NA NA NA NA NA 11583545 ## 3 NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## 1996 1997 1998 1999 2000 2001 2002 2003 ## 1 957000 947000 906000 972000 1211000 1178000 1225000 1184000 ## 2 13088654 13456246 14403852 15309378 15353177 15854696 17383375 17844385 ## 3 NA NA NA NA NA NA NA NA ## 2004 2005 2006 2007 2008 2009 2010 2011 ## 1 1304000 1286000 1285000 1254000 1383000 1420000 1394000 1469000 ## 2 18745951 19917566 22650321 25114898 25413098 25964418 29071501 31650244 ## 3 NA NA NA NA NA NA NA NA ## 2012 2013 2014 2015 2016 2017 2018 2019 2020 ## 1 1481000 1667000 1739000 1832000 1758000 1863000 1897000 1951000 NA ## 2 32748552 34426633 35738392 35318681 37645888 38258348 41189145 39826701 NA ## 3 NA NA NA NA NA NA NA NA NA ## 2021 ## 1 NA ## 2 NA ## 3 NA Next, we don’t actually really don’t want to use all the years but just want to have a look at some of the most recent years. In this dataset, we have values from 1995 - 2020. There are a few ways we can filter this data. We can filter by the column type by using a combination of the where( ) function and the is.numeric( ) function We can specify a specific range of dates using the range operator (:) You can try either method. Remember to save your filtered dataframe to a new variable. arrival_clean_subset &lt;- arrival_clean %&gt;% select(c(&quot;Country&quot;,&quot;country_code&quot;, where(is.numeric))) head(arrival_clean_subset,3) ## Country country_code 1995 1996 1997 1998 ## 1 Aruba ABW 912000 957000 947000 906000 ## 2 Africa Eastern and Southern AFE 11583545 13088654 13456246 14403852 ## 3 Afghanistan AFG NA NA NA NA ## 1999 2000 2001 2002 2003 2004 2005 2006 ## 1 972000 1211000 1178000 1225000 1184000 1304000 1286000 1285000 ## 2 15309378 15353177 15854696 17383375 17844385 18745951 19917566 22650321 ## 3 NA NA NA NA NA NA NA NA ## 2007 2008 2009 2010 2011 2012 2013 2014 ## 1 1254000 1383000 1420000 1394000 1469000 1481000 1667000 1739000 ## 2 25114898 25413098 25964418 29071501 31650244 32748552 34426633 35738392 ## 3 NA NA NA NA NA NA NA NA ## 2015 2016 2017 2018 2019 2020 ## 1 1832000 1758000 1863000 1897000 1951000 NA ## 2 35318681 37645888 38258348 41189145 39826701 NA ## 3 NA NA NA NA NA NA arrival_clean %&gt;% select(c(Country,country_code,&quot;1995&quot;:&quot;2020&quot;)) Now that we have all the dataframes ready to be combined we can decided to use the country code, the country name or both. Using the country code it self would be great but to be sure that we maximize the matching, we can use both country name and country code. travel_full_clean &lt;- inner_join(country_ticket_meal_code,arrival_clean_subset, by=c(&#39;country_code&#39;=&#39;country_code&#39;, &#39;Country&#39;=&#39;Country&#39;)) head(travel_full_clean,3) ## Country country_code Meal_Inexpensive_Restaurant one_way_ticket_local ## 1 Afghanistan AFG NA NA ## 2 Albania ALB 7.79 0.52 ## 3 Algeria DZA 2.96 0.25 ## 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 ## 1 NA NA NA NA NA NA NA NA NA NA ## 2 304000 287000 119000 184000 371000 317000 354000 470000 557000 645000 ## 3 520000 605000 635000 678000 749000 866000 901000 988000 1166000 1234000 ## 2005 2006 2007 2008 2009 2010 2011 2012 2013 ## 1 NA NA NA NA NA NA NA NA NA ## 2 748000 937000 1127000 1420000 1856000 2417000 2932000 3514000 3256000 ## 3 1443000 1638000 1743000 1772000 1912000 2070000 2395000 2634000 2733000 ## 2014 2015 2016 2017 2018 2019 2020 ## 1 NA NA NA NA NA NA NA ## 2 3673000 4131000 4736000 5118000 5927000 6406000 2658000 ## 3 2301000 1710000 2039000 2451000 2657000 2371000 591000 6.5 Missing values One aspect that is important when working with any dataset is how we deal with missing data. Our goal is to process our dataset so that we have complete rows of data with no missing or duplicate values. Here are some methods we can use when we are trying to deal with missing values. Removing the value from the dataset. We have to consider how many values are missing and will removing them impact the analysis we are trying to achieve. Imputation. This involves filling in the missing data with a value that makes sense. You can input using the mean, median or regression. Again, you have to determine if imputing your data makes sense with the data you are working with. Statistical models. In some cases we can use the existing data to predict the missing data with regression models. Find other sources. Sometimes the dataset you get is incomplete. You can also try to find other data sources to fill it in. In our cases we have 121 countries with missing values and 55 countries for full analysis. We can use the function complete.cases( ) to check this. sum(complete.cases(travel_full_clean)) ## [1] 55 Note The exclaimation mark (!) is a special character that is used when you want to say “is not” For this workshop we will only worry about the 55 countries that have complete rows of data. We can use the na.omit( ) function in order to select all the rows with complete data. travel_full_clean_subset &lt;- na.omit(travel_full_clean) head(travel_full_clean_subset,3) ## Country country_code Meal_Inexpensive_Restaurant one_way_ticket_local 1995 ## 2 Albania ALB 7.79 0.52 304000 ## 3 Algeria DZA 2.96 0.25 520000 ## 9 Armenia ARM 10.13 0.34 12000 ## 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 ## 2 287000 119000 184000 371000 317000 354000 470000 557000 645000 748000 ## 3 605000 635000 678000 749000 866000 901000 988000 1166000 1234000 1443000 ## 9 13000 23000 32000 41000 45000 123000 162000 206000 263000 319000 ## 2006 2007 2008 2009 2010 2011 2012 2013 2014 ## 2 937000 1127000 1420000 1856000 2417000 2932000 3514000 3256000 3673000 ## 3 1638000 1743000 1772000 1912000 2070000 2395000 2634000 2733000 2301000 ## 9 382000 511000 558000 575000 684000 758000 963000 1084000 1204000 ## 2015 2016 2017 2018 2019 2020 ## 2 4131000 4736000 5118000 5927000 6406000 2658000 ## 3 1710000 2039000 2451000 2657000 2371000 591000 ## 9 1192000 1260000 1495000 1652000 1894000 375000 Our dataset is now ready for the exploration an analysis. "],["data-visualization.html", "Chapter 7 Data visualization 7.1 Plots 7.2 ggplot2 7.3 gtsummary 7.4 Knitting", " Chapter 7 Data visualization Another way we can represent our insights is through data visualization through different graphs. Visualizations can be important tool in exploratory data analysis for identify patterns in our data. Creating meaningful visualization can help communicate your findings and ideas to a wide audience. 7.1 Plots There a few basic plots that can be used for exploratory analysis. In R, we can build most plots using the base R but we will also be exploring a package called ggplot2. We will use the display the previous summary statistics using: Boxplots Histograms Scatterplots 7.1.1 Boxplots Boxplots are used to summarize the same 5 number summary as the summary( ) function. They are also a great way to quickly detect outliers in your dataset. To create a basic boxplot with base R, we can use the boxplot( ) function. boxplot(travel_full_clean_subset$Meal_Inexpensive_Restaurant) With the basic boxplot we can quickly see that no outliers are present in our data and that our data is slight right skewed with the median is below the center of the boxplot. To label our boxplot, we can add the following arguments. boxplot(travel_full_clean_subset$Meal_Inexpensive_Restaurant, main = &quot;Average price of resturant meals&quot;, # Title of the graph xlab = &quot;&quot;, # x-axis label ylab= &quot;Dollar amount (CAD)&quot;, # y-axis label col = &quot;white&quot;) # color of the boxplot 7.1.2 Histogram Histograms can show the how our data is distributed. We can use the hist( ) function to do this. hist(travel_full_clean_subset$Meal_Inexpensive_Restaurant, breaks= 30, # number of breaks ylim = c(0,6), main = &quot;Distribution of Average meal cost (CAD)&quot;, xlab = &quot;&quot;) # y-axis limit 7.1.3 Scatterplots Scatterplots are useful to show a relationship between two different variables. For example, we can plot the the arrivals over time. Let’s examine how Finland has changed over time. There are a few steps we need to take Filter our dataset to show data for Finland Select the columns related to arrival (1995-2020) Pivot our data from wide format to long format Rename our columns to meaningful columns Draw the scatterplot We will be using the gather( ) function that is part of the tidyr package. This package helps us convert between different data formats. Note tidyr and dplyr are both part of the tidyverse set of packages. You can install both by using `install.packages(‘tidyverse’) and load then with library(tidyverse) library(tidyr) sweden_travel &lt;- travel_full_clean_subset %&gt;% filter(country_code==&quot;SWE&quot; ) %&gt;% select(c(&quot;1995&quot;:&quot;2020&quot;)) %&gt;% gather() %&gt;% # pivots the data rename(years= key, arrivals= value) Take note of the data types for each of the columns. Our years column are characters but we want to change that to a numerical format. To do this, we can use the as.numeric () function on the specific column sweden_travel$years &lt;-as.numeric(sweden_travel$years) plot(sweden_travel$years, sweden_travel$arrivals/100000, main=&quot;Number of Travellers from 1995 to 2020 (Sweden)&quot;, xlab=&quot;Years&quot;, ylab=&quot;Number of arrivals (x100,000)&quot;) From the scatterplot, we see a steady increase in arrivals to sweeden over the years. We do see a few years between 2010, and 2015 with a high spike in arrivals which could indicate a few outliers in our data. To check we can run another boxplot on the arrivals data. boxplot(sweden_travel$arrivals/100000, main = &quot;Number of arrivals from 1995 - 2020 (Sweden)&quot;, # Title of the graph xlab = &quot;&quot;, # x-axis label ylab= &quot;Number of arrivals (x100,000)&quot;, # y-axis label col = &quot;white&quot;) # color of the boxplot) From the boxplot, we can see that there is at least 1 point that is an outlier in the data indicated by the circle above the maximum value 7.2 ggplot2 You can use the ggplot2 package to create plots and figures instead of using the base R. It gives you more control over your plots to specify how you want it to look. Let’s remake the previous 3 plots using ggplot2 Note You can refer to the ggplot2 https://ggplot2.tidyverse.org/reference/index.html to find all the possible plots that you can build with ggplot2 First, we will need to install the package and then load the pack using the library( ) function. library(ggplot2) 7.2.1 Boxplot The basic structure for using ggplot( ) is ggplot(data = x, aes(x = x-axis, y = y-axis)) + geom_typeOfPlot() where aes stands for aesthetic. This defines what variables you want to plot. For our boxplot, we want look at the meal prices as a whole so we only need to declare the y-variable. ggplot(data = travel_full_clean_subset, aes(y=Meal_Inexpensive_Restaurant)) + geom_boxplot() We can also rename our axis in a simliar way to our base R plot by using the labs( ) argument. ggplot(data = travel_full_clean_subset, aes(y=Meal_Inexpensive_Restaurant)) + geom_boxplot() + labs(title=&quot;Average price of resturant meals&quot;, x=&quot;&quot;, y = &quot;Dollar amount (CAD)&quot;) From here, we can customize the look of our boxplot with other arguments. 7.2.2 Histogram We can do the same with our histogram. Instead of using geom_boxplot( ) we will use geom_histogram( ) ggplot(data = travel_full_clean_subset, aes(x=Meal_Inexpensive_Restaurant)) + geom_histogram(bins=30) + labs(title=&quot;Distribution of Average meal cost (CAD)&quot;, y= &quot;Frequency&quot;, x=&quot;&quot;) 7.2.3 Scatterplot Similarly with the scatterplot, we can use geom_point( ) ggplot(data = sweden_travel, aes(x=years, y = arrivals/100000)) + geom_point() + labs(title=&quot;Number of Travellers from 1995 to 2020 (Sweden)&quot;, x=&quot;Years&quot;, y=&quot;Number of arrivals (x100,000)&quot;) We can see that the scatterplot has the same trend but looks a little different. We can easily adjust the graph so it matches our previous one. ggplot(data = sweden_travel, aes(x=years, y = arrivals/100000)) + geom_point(shape=1, size=2) + labs(title=&quot;Number of Travellers from 1995 to 2020 (Sweden)&quot;, x=&quot;Years&quot;, y=&quot;Number of arrivals (x100,000)&quot;)+ scale_x_discrete(guide = guide_axis(check.overlap = TRUE)) + theme_classic() By adding a few arguments we can create clean and meaningful graphs using ggplot2 ggplot(data = sweden_travel, aes(y=arrivals/100000)) + geom_boxplot(outlier.color = &quot;red&quot;, outlier.shape = 1, outlier.size = 3) + labs(title=&quot;Number of Travellers from 1995 to 2020 (Sweden)&quot;, x=&quot;&quot;, y = &quot;Arrivals&quot;) 7.2.4 Exporting plots Once you are finished with creating your desired graph, you can export the file as a pdf or other vector image formats for journals. Let’s use our last boxplot on the number of arrivals as a example. First we need to save the boxplot as a variable. boxplot_arrivals_swe &lt;- ggplot(data = sweden_travel, aes(y=arrivals/100000)) + geom_boxplot(outlier.color = &quot;red&quot;, outlier.shape = 1, outlier.size = 3) + labs(title=&quot;Number of Travellers from 1995 to 2020 (Sweden)&quot;, x=&quot;&quot;, y = &quot;Arrivals&quot;) Next, we will use the ggsave( ) function and specify the location, the format, and the height and width we want to save the image as. ggsave(&quot;/Users/markly/boxplot_swe_arrival.pdf&quot;, plot = boxplot_arrivals_swe, device = &quot;pdf&quot;, width = 12, height = 6, dpi=150) Note: We can save images in different formats including png, eps, ps, tex, jpeg, tiff, bmp, svg or wmf 7.3 gtsummary Another powerful package that helps with data visulizuation is gtsummary which can quickly generate summary tables. We will need to install the package and load the package using the library( ) function. library(gtsummary) Try Try installing the gtsummary package Let’s say we are interested in summarizing the meal and ticket costs in a table. First, we will need to subset that from our dataset and then pass that into the tbl_summary( ) function. travel_full_clean_subset %&gt;% select(c(Meal_Inexpensive_Restaurant,one_way_ticket_local)) %&gt;% tbl_summary() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #mywnzhyqfo .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #mywnzhyqfo .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #mywnzhyqfo .gt_caption { padding-top: 4px; padding-bottom: 4px; } #mywnzhyqfo .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #mywnzhyqfo .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #mywnzhyqfo .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #mywnzhyqfo .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #mywnzhyqfo .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #mywnzhyqfo .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #mywnzhyqfo .gt_column_spanner_outer:first-child { padding-left: 0; } #mywnzhyqfo .gt_column_spanner_outer:last-child { padding-right: 0; } #mywnzhyqfo .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #mywnzhyqfo .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #mywnzhyqfo .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #mywnzhyqfo .gt_from_md > :first-child { margin-top: 0; } #mywnzhyqfo .gt_from_md > :last-child { margin-bottom: 0; } #mywnzhyqfo .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #mywnzhyqfo .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #mywnzhyqfo .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #mywnzhyqfo .gt_row_group_first td { border-top-width: 2px; } #mywnzhyqfo .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #mywnzhyqfo .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #mywnzhyqfo .gt_first_summary_row.thick { border-top-width: 2px; } #mywnzhyqfo .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #mywnzhyqfo .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #mywnzhyqfo .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #mywnzhyqfo .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #mywnzhyqfo .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #mywnzhyqfo .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #mywnzhyqfo .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #mywnzhyqfo .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #mywnzhyqfo .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #mywnzhyqfo .gt_left { text-align: left; } #mywnzhyqfo .gt_center { text-align: center; } #mywnzhyqfo .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #mywnzhyqfo .gt_font_normal { font-weight: normal; } #mywnzhyqfo .gt_font_bold { font-weight: bold; } #mywnzhyqfo .gt_font_italic { font-style: italic; } #mywnzhyqfo .gt_super { font-size: 65%; } #mywnzhyqfo .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #mywnzhyqfo .gt_asterisk { font-size: 100%; vertical-align: 0; } #mywnzhyqfo .gt_indent_1 { text-indent: 5px; } #mywnzhyqfo .gt_indent_2 { text-indent: 10px; } #mywnzhyqfo .gt_indent_3 { text-indent: 15px; } #mywnzhyqfo .gt_indent_4 { text-indent: 20px; } #mywnzhyqfo .gt_indent_5 { text-indent: 25px; } Characteristic N = 551 Meal_Inexpensive_Restaurant 11 (6, 17) one_way_ticket_local 1.20 (0.50, 2.20) 1 Median (IQR) This produced a summary table of all the meals and ticket information giving us the median and IQR without any additional steps. We can customize this table a bit further by adding a few arguments. travel_full_clean_subset %&gt;% select(c(Meal_Inexpensive_Restaurant,one_way_ticket_local)) %&gt;% tbl_summary(label = list(&quot;Meal_Inexpensive_Restaurant&quot;~&quot;Meal Price&quot;, &quot;one_way_ticket_local&quot;~&quot;One-way Ticket Price&quot;)) %&gt;% modify_header(label = &quot;**Variable**&quot;) %&gt;% # update the column header bold_labels() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ixirnfdurj .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ixirnfdurj .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ixirnfdurj .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ixirnfdurj .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ixirnfdurj .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ixirnfdurj .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ixirnfdurj .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ixirnfdurj .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ixirnfdurj .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ixirnfdurj .gt_column_spanner_outer:first-child { padding-left: 0; } #ixirnfdurj .gt_column_spanner_outer:last-child { padding-right: 0; } #ixirnfdurj .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ixirnfdurj .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ixirnfdurj .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ixirnfdurj .gt_from_md > :first-child { margin-top: 0; } #ixirnfdurj .gt_from_md > :last-child { margin-bottom: 0; } #ixirnfdurj .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ixirnfdurj .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ixirnfdurj .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ixirnfdurj .gt_row_group_first td { border-top-width: 2px; } #ixirnfdurj .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ixirnfdurj .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ixirnfdurj .gt_first_summary_row.thick { border-top-width: 2px; } #ixirnfdurj .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ixirnfdurj .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ixirnfdurj .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ixirnfdurj .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ixirnfdurj .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ixirnfdurj .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ixirnfdurj .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #ixirnfdurj .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ixirnfdurj .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ixirnfdurj .gt_left { text-align: left; } #ixirnfdurj .gt_center { text-align: center; } #ixirnfdurj .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ixirnfdurj .gt_font_normal { font-weight: normal; } #ixirnfdurj .gt_font_bold { font-weight: bold; } #ixirnfdurj .gt_font_italic { font-style: italic; } #ixirnfdurj .gt_super { font-size: 65%; } #ixirnfdurj .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #ixirnfdurj .gt_asterisk { font-size: 100%; vertical-align: 0; } #ixirnfdurj .gt_indent_1 { text-indent: 5px; } #ixirnfdurj .gt_indent_2 { text-indent: 10px; } #ixirnfdurj .gt_indent_3 { text-indent: 15px; } #ixirnfdurj .gt_indent_4 { text-indent: 20px; } #ixirnfdurj .gt_indent_5 { text-indent: 25px; } Variable N = 551 Meal Price 11 (6, 17) One-way Ticket Price 1.20 (0.50, 2.20) 1 Median (IQR) gtsummary is also great for separating and summarizing groups in the same table. We can add region information to our data set using a left join. After saving our new dataframe, we can select only the variables needed, region, meal price, and ticket price, and apply the gtsummary( ) function to output a table based on region. region&lt;- read.csv(&quot;data/csv_region.csv&quot;) region_select &lt;-region %&gt;% select(c(alpha.3,region)) %&gt;% rename(country_code = alpha.3) travel_region &lt;- travel_full_clean_subset %&gt;% select(c(1:4)) %&gt;% inner_join(.,region_select,by=&quot;country_code&quot;) travel_region %&gt;% select(-c(Country,country_code))%&gt;% tbl_summary(by=region, label = list(&quot;Meal_Inexpensive_Restaurant&quot;~&quot;Meal Price&quot;, &quot;one_way_ticket_local&quot;~&quot;One-way Ticket Price&quot;)) %&gt;% modify_header(label = &quot;**Variable**&quot;) %&gt;% # update the column header bold_labels() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ilyuynykyo .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ilyuynykyo .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ilyuynykyo .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ilyuynykyo .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ilyuynykyo .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ilyuynykyo .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ilyuynykyo .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ilyuynykyo .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ilyuynykyo .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ilyuynykyo .gt_column_spanner_outer:first-child { padding-left: 0; } #ilyuynykyo .gt_column_spanner_outer:last-child { padding-right: 0; } #ilyuynykyo .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ilyuynykyo .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ilyuynykyo .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ilyuynykyo .gt_from_md > :first-child { margin-top: 0; } #ilyuynykyo .gt_from_md > :last-child { margin-bottom: 0; } #ilyuynykyo .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ilyuynykyo .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ilyuynykyo .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ilyuynykyo .gt_row_group_first td { border-top-width: 2px; } #ilyuynykyo .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ilyuynykyo .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ilyuynykyo .gt_first_summary_row.thick { border-top-width: 2px; } #ilyuynykyo .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ilyuynykyo .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ilyuynykyo .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ilyuynykyo .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ilyuynykyo .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ilyuynykyo .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ilyuynykyo .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #ilyuynykyo .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ilyuynykyo .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ilyuynykyo .gt_left { text-align: left; } #ilyuynykyo .gt_center { text-align: center; } #ilyuynykyo .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ilyuynykyo .gt_font_normal { font-weight: normal; } #ilyuynykyo .gt_font_bold { font-weight: bold; } #ilyuynykyo .gt_font_italic { font-style: italic; } #ilyuynykyo .gt_super { font-size: 65%; } #ilyuynykyo .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #ilyuynykyo .gt_asterisk { font-size: 100%; vertical-align: 0; } #ilyuynykyo .gt_indent_1 { text-indent: 5px; } #ilyuynykyo .gt_indent_2 { text-indent: 10px; } #ilyuynykyo .gt_indent_3 { text-indent: 15px; } #ilyuynykyo .gt_indent_4 { text-indent: 20px; } #ilyuynykyo .gt_indent_5 { text-indent: 25px; } Variable Africa, N = 61 Americas, N = 101 Asia, N = 141 Europe, N = 231 Oceania, N = 21 Meal Price 5 (4, 8) 10 (6, 12) 6 (3, 10) 16 (12, 22) 22 (21, 22) One-way Ticket Price 0.49 (0.33, 1.01) 0.85 (0.76, 1.29) 0.49 (0.35, 0.93) 2.20 (1.29, 4.20) 3.46 (3.18, 3.75) 1 Median (IQR) With both ggplot2 and gtsummary, we have lots of tools to use to display and communicate our data. 7.4 Knitting Now that we have explored our data, we want to generate a report with our findings. To do this, we will use the knit button located at the top of the RStudio interface. Figure 7.1: knit button Before, we start we should save our work. Select the knit to word option and wait for the file to compile. We can adjust how the word file at the top of the rmd file. Once the word file is generated, we can make adjustments to tables, text and, figures. Figure 7.2: adjust document "],["regression.html", "Chapter 8 Regression 8.1 Linear regression", " Chapter 8 Regression R is a statistical computing language which is capable of performing multiple statistical models including lm(y ~ x) linear regression model with one explanatory variable lm(y ~ x1 + x2 + x3) multiple regression, a linear model with multiple explanatory variables glm(y ~ x, family = poisson) generalized linear model, poisson distribution; see ?family to see those supported, including binomial, gaussian, poisson, etc. glm(y ~ x + y, family = binomial) glm for logistic regression aov(y ~ x) analysis of variance (same as lm except in the summary) gam(y ~ x) generalized additive models tree(y ~ x) or rpart(y ~ x) regression/classification trees 8.1 Linear regression Linear regression is a statistical method used for predictive analysis where we want to show if there is a linear relationship between an independent predictor variable and a dependent output variable. The goal is to build a mathematical formula that defines y as a function of the x variable. Once, we built a statistically significant model, it’s possible to use it for predicting future outcome on the basis of new x values. From the previous scatterplot, we noticed that there might be a relationship between the years and arrivals for Sweden. We can try to perform a linear regression to determine if that is the case. The hypothesis we want to propose is that the number of arrivals to Sweden increases linearly per year. The general formula for a linear model is \\[Y_{i} = \\beta_{0} + \\beta_{1}X_{1} + \\epsilon \\] where \\[Y_{i} = \\text{Dependent Variable}\\] \\[\\beta_{0} = \\text{Constant/Intercept}\\] \\[\\beta_{1} = \\text{Slope/Intercept}\\] \\[X_{1} = \\text{Independent Variable}\\] \\[\\epsilon = \\text{Error Term}\\] For our model, we would write out our linear regression equation as \\[\\text{arrivals} = \\beta_{0} + \\beta_{1}*\\text{Years} + \\epsilon\\] 8.1.1 Assumptions of Linear Regression Before we begin with linear regression, there are some assumptions that need to be satisfied. We can use the LINE acronym to explain these assumptions. Linearity of residuals - There needs to be a linear relationship between the dependent and independent variables(s) Independance of residuals - The error terms should not be dependent on one another. For example, in time series, the next value is dependent on the previous one. Normal distribution of residuals - The mean residuals should follow a normal distribution with a mean equal to zero or close to zero. Equal variance of the residuals - The error terms must have constant variance 8.1.2 Residuals Residuals represent the difference between the predicted value and the observed value. The formula for residuals is. \\[\\text{Residual} - \\text{actual y value} - \\text{predicted y value}\\] This is what residuals look like on a linear regression plot. Figure 8.1: Residuals on a linear regression 8.1.3 Creating our intial model To create a linear model, we use this function when we have one explanatory variable lm([target] ~ [predictor / features], data = [data source]) In this case our y-variable is the number of arrivals and the x-variable is the years Note: The years variable in our dataframe is a character. We need to convert it to a numeric to perform the linear regression. swe_model &lt;- lm(arrivals~years,data=sweden_travel) swe_model ## ## Call: ## lm(formula = arrivals ~ years, data = sweden_travel) ## ## Coefficients: ## (Intercept) years ## -470402333 237113 8.1.4 Interpretation of results We can print out a summary of our model using the summary( ) function. This will give us information on the intercept, standard error, p-value, test-statistic, \\(r^2\\) value. summary(swe_model) ## ## Call: ## lm(formula = arrivals ~ years, data = sweden_travel) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6608564 -826391 -507921 -40090 5703338 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -470402333 126815668 -3.709 0.00109 ** ## years 237113 63170 3.754 0.00098 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2416000 on 24 degrees of freedom ## Multiple R-squared: 0.3699, Adjusted R-squared: 0.3436 ## F-statistic: 14.09 on 1 and 24 DF, p-value: 0.0009798 In this output, the estimate column shows the estimates of our beta coefficients \\(\\beta_0\\) and \\(\\beta_1\\). The intercept (\\(\\beta_0\\)) is -470,402,333 and the coefficient of years variable is 237,113. We can rewrite our original equation with our new results \\[\\text{arrivals} = \\beta_{0} + \\beta_{1}*\\text{Years} + \\epsilon\\] \\[\\text{arrivals} = -470,402,333 + 237,113*\\text{Years} + \\epsilon\\] In writen form, we would say If the Years is equal to zero, we can expect -470,402,333 arrivals For every 1 increase in Years, we can expect 237,113 arrivals The first point doesn’t make any sense since we can’t have year equal to 0. 8.1.5 Assumption checking If we plot our linear regression, it will give us diagnostic plots that will help determine if our linear model satisfies certain assumptions Residual vs Fitted - Used to check linear relationship assumptions. Normal Q-Q- Used to check if the residuals are normally distributed. Scale-Location - Used to check homogeneity of variance. Residuals vs Leverage - Used to check for influential cases or extreme values that might influence the regression results. plot(swe_model,which=(1)) If our linearity assumption is met, we should see no pattern and the red line show be fairly flat. In our model, we see that this is the case with a few points cluster of points that lie above the line. plot(swe_model,which=(2)) For our normality assumption we can use the second plot, the Normal Q-Q plot. what we expect to see is a 45 degree line and most of the points should lie on this line. For our model this does not seem to hold true as our points are closer to a 10-20 degree slope. plot(swe_model,which=(3)) To check our assumption of constant variance we can use the third plot, the scale-location plot. What we want to see here are points scattered randomly and the red line to be close to horizontal. However, what we see is there is a pattern and that indicates that the constant variance assumption does not hold true for this model. What we can try to do is transform our y variable using: Log transformation Square Root transformation Cube Root transformation par(mfrow=c(1,2)) plot(swe_model, which=c(4,5)) The last plot is the Residuals vs leverage plot. Leverage refers to to the extent where our coefficients would change if we removed an observation from the data set. Points that have high leverage would noticeably change our coefficients. If a point falls outside of the red dashed line, cook’s distance, it is considered to be a influential point and requires further investigation. For our model, we don’t have any points that are influential. 8.1.6 Summary Our initial hypothesis was Does the number of arrivals increase linearly over time (Years)? Since this model does not satisfy the normality assumption and the constant variance assumption that is required for linear regression, we cannot say that the number of arrivals increases linearly as years increases. 8.1.7 Next steps Since our linear regression model did not work, we can try using a different model that might be better in explaining trend. In this case, our independent variable is the number of arrivals which count data. Count data is data that does not contain any non-negative integer numbers, (0,1,2,3…). The usual function to deal with count data is a Poisson Regression, which is a generalized linear model used when the independent variable deals with count data that follows a Poisson distribution. It assumes the logarithm of expected values (mean) that can be modeled into a linear form by some unknown parameters. "],["other-capabilties.html", "Chapter 9 Other capabilties 9.1 R-bookdown 9.2 R-Shiny 9.3 Machine learning", " Chapter 9 Other capabilties We can create and perform other tasks using R. We will go quickly go through some R’s capabilities and things you can do with R including R-bookdown R-Shiny Machine learning 9.1 R-bookdown With R you can create books using the R-bookdown package. This entire workshop was created using R-bookdown. With R-Bookdown, we can create books and long form articles and reports. We can output these books as a PDF, LaTeX, HTML, EPUB and word files. It is a great way to produce a structured document with chaptures, sections, subsections and appendices. You can visit https://bookdown.org/ to find out more about bookdown. 9.2 R-Shiny We can build web applications and dashboards using R-Shiny. This is an alternative way to present data in a more interactive way. Some examples of R-Shiny applications can be found on https://shiny.rstudio.com/gallery/ which includes COVID-19 trackers, A/B Testing sample size calculators, Nutritional calculators, Hospital dashboards and genome browsers. 9.3 Machine learning We can perform machine learning tasks in R using the caret and factoextra packages. This includes models like Random forests Decisions Trees XGBoost K-means Neural Networks It is important to note that although these technologies can be powerful and provide a new insight to existing data, we have to ask ourselves if it is necessary and why we would want to attempt to use machine learning. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
